Programs
========

All available programs are contained in the top-level directory where this package is installed. Programs are written in python and use the '.py' file extension.

All programs are configured by passing command-line options. Pass the `--help` option to view documentation for these options, e.g.::

	python generate.py --help


Executable Programs
-------------------

.. _prog-generate:

generate
~~~~~~~~
The `generate` program writes to a CSV file that can be later be read by the :mod:`analysis.galfun` or by :mod:`analysis.fisher` modules to generate galaxy images and their analysis. Fast image rendering with `galsim <https://github.com/GalSim-developers/GalSim>`_.

The user specifies the arguments of the galaxy and the psf in the following way:: 

    python generate.py -p PROJECT_NAME -gal 1 --galaxy-model MODEL_NAME --snr VALUE --PARAM1_NAME PARAM1_VALUE ... 

The project name, the galaxy model, the snr value, and the galaxy ID (in this case 1) should always be specified. One can optionally add a psf for 
the galaxy to be convolved with::

    python generate.py -p PROJECT_NAME -gal 1 --galaxy-model MODEL_NAME --snr VALUE --PARAM1_NAME PARAM1_VALUE ... --psf_model PSF_MODEL_NAME --PSF_PARAM1 PSF_PARAM1_VALUE ... 

The psf and the galaxy are treated differently in the package. If you want to generate two galaxies just use the procedure above changing the id:: 

    python generate.py -p PROJECT_NAME -gal 2 --galaxy-model MODEL_NAME --snr VALUE --PARAM1_NAME PARAM1_VALUE ... --psf_model PSF_MODEL_NAME --PSF_PARAM1 PSF_PARAM1_VALUE ... 

Then the csv file should contain information about both galaxies (one row per galaxy). It is recommended you use specify the same psf for both galaxies.

.. _prog-display:

display
~~~~~~~

The `display.py` program displays simulated images and analysis results stored in the CSV file generated by the `generate.py` program. It will display the images when the program is executed produced unless the `--hide` argument is used when executed. Please run:: 

	python display.py --help 

For the different images that can be produced and some explanations for them. More information on how to use the module can also be found in 
:doc:`here </examples>`.

.. _prog-fitting:

fitting
~~~~~~~

The :mod:`analysis.fitting` program runs fits using `lmfit <https://lmfit.github.io/lmfit-py/>`_. as an alternative way of estimating the noise bias and error in order to compare it to the Fisher Formalism. 

In order to run a certain number N of fits, make sure you already created a galaxy with the `generate` program and then run:: 

	fitting.py -p EXISTING_PROJECT_NAME -rf -n N --snr SNR_VALUE

If you are Stanford SLAC afilliated and want send N batch jobs to SLAC, then log in to SLAC and then run:: 

	fitting.py -p EXISTING_PROJECT_NAME -rfs short -n N --snr SNR_VALUE

The method use to 

Other Modules
--------------

.. _prog-models:

models
~~~~~~

The :mod:`analysis.models` module contains the galaxy and psf models that can be produced by :ref:`prog-generate` and 
analyzed by :mod:`analysis.fisher`. It specifies the commands that `galsim <https://github.com/GalSim-developers/GalSim>`_ 
should use to produce them. 

.. _prog-fisher:

fisher
~~~~~~

The :mod:`analysis.fisher` module contains the analysis by the Fisher Formalism which is made on the galaxy that :ref:`prog-generate` produced. 
Please refer to the tutorials in :doc:`tutorial notebooks </notebooks>` for specific instructions on how to use this module efficiently 
in conjunction with :mod:`analysis.galfun` module. 

.. _prog-galfun:

galfun
~~~~~~

The :mod:`analysis.galfun` module manages the parameters of the galaxies to and stores them in a convenient format that is then used 
by the :mod:`analysis.galfun`. 

.. _prog-default:

default
~~~~~~~
The :mod:`analysis.default` module stores defaults parameter values for different parts of the package. 

runfits
~~~~~~~
The :mod:`analysis.runfits` module run :mod:`lmfit` to do the fittings on several noisy instantiations on a given galaxy model and produces 
results in the form of .csv files inside the "results" folder that will be inside your corresponding project folder (depends on what you decided to name it).